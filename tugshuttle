#!/bin/bash

#####################################################################################
#                                                                                   #
# The MIT License (MIT)                                                             #
#                                                                                   #
# Copyright (c) 2015 Louis van Harten                                               #
#                                                                                   #
# Permission is hereby granted, free of charge, to any person obtaining a copy      #
# of this software and associated documentation files (the "Software"), to deal     #
# in the Software without restriction, including without limitation the rights      #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell         #
# copies of the Software, and to permit persons to whom the Software is             #
# furnished to do so, subject to the following conditions:                          #
#                                                                                   #
# The above copyright notice and this permission notice shall be included in all    #
# copies or substantial portions of the Software.                                   #
#                                                                                   #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR        #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,          #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE       #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER            #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,     #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     #
# SOFTWARE.                                                                         #
#                                                                                   #
#####################################################################################

show_help() {
    printf "usage:\n\ttugshuttle loc#\n\nwith loc# in:\n\tams1, ams2, ams3, fra1, lon1, nyc1, nyc2, nyc3, sfo1, sgp1, tor1\n"
    printf "\nIf the Tugshuttle process receives a SIGKILL while it is running,\nit will not be able to clean up the Droplet. "
    printf "You will be billed \nDigitalOcean credit for Droplets that are not destroyed.\n"
    printf "To clean up lingering Tugshuttle Droplets, run:\n\n\ttugshuttle clean\n"
    exit
}

if [[ $@ == **-h** ]] 
then
    show_help
fi

#first set-up in case tugboat isn't configured
if [ ! -z "$(tugboat info | grep authorize)" ] || [ ! -z "$(tugboat droplets | grep from\ API:\ unauthorized)"  ]
then
    printf "Tugboat could not find a valid (read/write) DigitalOcean Access Token.\nYou can get an Access Token from "
    printf "https://cloud.digitalocean.com/settings/tokens/new\n\nEnter your access token: "
    read acctoken
    if [ -e ~/.tugboat ]; then mv ~/.tugboat ~/.tugboat.bak; printf "Existing ~/.tugboat settings stored in ~/.tugboat.bak\n\n"; fi
    printf "%s\n%s\n%s\n" "---" "authentication:" "  access_token: $acctoken" > ~/.tugboat
    printf "%s\n%s\n%s\n%s\n" "ssh:" "  ssh_user: root" "  ssh_key_path: ~/.ssh/id_rsa" "  ssh_port: '22'" >> ~/.tugboat
    printf "%s\n%s\n%s\n%s\n" "defaults:" "  region: lon1" "  image: ubuntu-14-04-x64" "  size: 512mb" >> ~/.tugboat
    printf "%s\n%s\n%s\n" "  ssh_key: ''" "  private_networking: 'false'" "  backups_enabled: 'false'" >> ~/.tugboat
    
    #correct token if invalid
    validAuth=''
    while [ -z "$validAuth" ]
    do
        if [ ! -z "$(tugboat droplets 2>/dev/null | grep from\ API:\ unauthorized)" ]
        then
            printf "\n    (!) Access Token invalid.\n\nYou can get an Access Token from "
            printf "https://cloud.digitalocean.com/settings/tokens/new\n\nEnter your access token: "
            read acctoken
            sed -e "s/access_token:.*/access_token:\ $acctoken/" ~/.tugboat > ~/.tugboat.tmp && mv ~/.tugboat.tmp ~/.tugboat
        else
            validAuth='success'
        fi
    done

    while [ -z "$(tugboat keys 2>/dev/null | grep id:)" ]
    do
        printf "\n%s\n" "No SSH keys linked to this DO account."
        printf "%s\n\n" "Add your public key at https://cloud.digitalocean.com/settings/security"
        read -p "Press [Enter] when done"
    done
    
    printf "\n\n$(tugboat keys 2>/dev/null | grep id: | grep -nT Name | sed -e s/,\ fingerprint:.*//)\n\n"
    read -p "Choose a linked SSH key ["1", "2", "3", ...] "
    keyID="$(tugboat keys 2>/dev/null | grep id: | grep -nT Name | sed -e s/,\ fingerprint:.*// | sed -n "$REPLY""p" |\
         sed -e s/.*id:\ // | sed -e "s/)//" )"
    sed -e "s/ssh_key:.*/ssh_key:\ $keyID/" ~/.tugboat > ~/.tugboat.tmp && mv ~/.tugboat.tmp ~/.tugboat
    
    printf "\nChanges written to ~/.tugboat\nIf any values are incorrect or change, edit ~/.tugboat.\n\n"
fi

clean_up_droplets() {
    if [[ -z "$(tugboat droplets | grep tugshuttle-to-)" ]]
    then
        printf "\nNo more Tugshuttle Droplets found!\n"
    else
        tugboat destroy tugshuttle-to-
        printf "\nConfirming deletion"
        for loopvar in `seq 1 10`;
        do
            printf "."
            sleep 1
        done
        printf ".\n"
        printf "\nOne Tugshuttle Droplet deleted!\n"
        clean_up_droplets
    fi
    exit
}

if [[  $@ == **clean** ]]
then
    clean_up_droplets
    exit
fi    

if [[ $# == 0 ]]
then
    show_help
fi

keyID=$(cat ~/.tugboat | grep ssh_key: | sed -e "s/.*ssh_key://")

if [[ -z "$(tugboat droplets | grep tugshuttle-to-$1)" ]]
then
    tugboat create -r $1 -s 512mb -i ubuntu-14-04-x64 -k $keyID tugshuttle-to-$1
else
    printf "\nExisting Droplet found in $1. Using that one...\n"
fi
tugboat wait tugshuttle-to-$1 --state active
IPtunnel=$(tugboat info tugshuttle-to-$1 | grep IP4: | sed s/IP4:// | tr -d '[[:space:]]')
printf "\nIP of server: $IPtunnel\n\n"
keyscanout=''
while [ -z "$keyscanout" ]
do
    sleep 2
    keyscanout=$(ssh-keyscan $IPtunnel 2>&1 >> ~/.ssh/known_hosts)
    printf "Attempting to add server to known host\n\n"
done
sshuttle -r root@$IPtunnel 0.0.0.0/0 -vv
yes | tugboat destroy tugshuttle-to-$1
